//region annoations
/*:
 * @target MZ
 * @plugindesc
 * [v1.0.1 JAFT-Create] An extension for JAFTING to enable recipe creation.
 * @author JE
 * @url https://github.com/je-can-code/rmmz-plugins
 * @base J-Base
 * @base J-JAFTING
 * @orderAfter J-Base
 * @orderAfter J-JAFTING
 * @help
 * ============================================================================
 * OVERVIEW
 * This plugin enables the "create" functionality of JAFTING.
 * The "create" functionality is a flexible but straight-forward adaptation of
 * a traditional crafting system.
 *
 * Integrates with others of mine plugins:
 * - J-Base; to be honest this is just required for all my plugins.
 * - J-JAFTING; the core that this engine hooks into to enable crafting.
 *
 * ============================================================================
 * CRAFTING
 * Ever want to create some items and/or equips? Maybe also separate them into
 * various thematic categories as well? Well now you can! By using the J-MZ
 * Data Editor app, you can easily click your way through category and recipe
 * configuration creation!
 *
 * DETAILS
 * One might ask "how does it work?", and considering the level of complexity
 * that a crafting system typically entails, your question is well-founded.
 * Fortunately, I've boiled down creation to a few things that you need to
 * comprehend in order to get this working. Those things are "recipes" with
 * their "core data" and "component data".
 *
 * WHAT IS A RECIPE?
 * A recipe is a combination of the previously listed "core data" and
 * "component data". These two things together represent a single "recipe", of
 * which is defined by a unique key of your choosing, along with all the rest
 * of the details.
 *
 * CORE DATA
 * The "core data" of a recipe represents mostly a recipe's metadata.
 * - Key
 *  The unique identifier for this recipe.
 *
 * - Icon
 *  The icon index that is displayed next to the recipe in the list.
 *  A -1 informs the system to use the first output's icon index.
 *
 * - Name
 *  The name that is displayed when listing known recipes of a category.
 *  An empty string informs the system to use the first output's name.
 *
 * - Description
 *  The description shown in the help window in the crafting scene.
 *  An empty string informs the system to use the first output's description.
 *
 * - Unlocked By Default
 *  Whether or not the recipe is unlocked without being manually unlocked.
 *
 * - Masked Until Crafted
 *  Whether or not the recipe details are obfuscated with ???s until crafted.
 *
 * - Category Keys
 *  A list of category keys that the recipe belongs to.
 *
 * The above information is important metadata mostly for display purposes
 * within the crafting scene.
 *
 * COMPONENT DATA
 * The "component data" of a recipe represents the requirements for actually
 * crafting a given recipe.
 * - Ingredients
 *  A list of components that are consumed upon recipe creation.
 *
 * - Tools
 *  A list of required-but-not-consumed components for recipe creation.
 *
 * - Output
 *  A list of components that are generated by the recipe's creation.
 *
 * WHAT IS A COMPONENT
 * After understanding the above, you may wonder "well, what is a component?".
 * A "component" in the context of this system is simply a representation of
 * a type of item/weapon/armor (or money/SDP points) and its corresponding
 * quantity. A "component" is effectively a line-item of the given section in
 * a recipe that it lives.
 *
 * ----------------------------------------------------------------------------
 * ABOUT THE RECIPE/CATEGORY CONFIGURATION:
 * It is important to note that this file is REQUIRED if you are using this
 * plugin. The configuration file is just a JSON file that lives in your /data
 * directory with other data files like your maps and database stuff, which
 * means you could hand-write it if you were a masochist, but that is highly
 * prone to error.
 *
 * It is strongly recommended to use the app I built for it.
 *
 * I literally built the app so that I didn't have to use the plugin manager's
 * really clumsy interface for configuring recipes.
 *
 *
 * USING THE DATA EDITOR
 * Obviously it would be difficult to describe this without the ability to use
 * images in here, but consider the following facts:
 *
 * RECIPE:CATEGORY RELATIONSHIP
 * A recipe can belong to as many categories as you desire.
 * If you don't know any of the categories, the player won't have access to
 * the recipe to create in the scene.
 *
 * ABUSING THE HELPERS
 * It is strongly recommended to keep the component and category helper windows
 * up on the side or background to manipulate the various data points in them,
 * and also being able to clone the selected/relevant data into the respective
 * lists that they relate to.
 *
 * DEFAULT RECIPE FIELDS
 * Some of the fields of a recipe can be left blank.
 * When said fields are left blank, they will instead be populated with the
 * first item in the output list.
 * Those fields include:
 * - Name
 * - Description
 * - Icon Index (cannot be blank, set to -1 aka default)
 *
 * UNIQUENESS REQUIREMENTS
 * The Data Editor does not enforce it, but the keys of the list are required
 * to be unique. If you have duplicate keys, the last one found will be the
 * recipe representing the key. I suppose that isn't horrible, but it does seem
 * rather wasteful.
 *
 * ============================================================================
 * CHANGELOG:
 * - 1.0.1
 *    Recipes & Categories can now be updated for existing save files.
 * - 1.0.0
 *    The initial release.
 * ============================================================================
 *
 * @param parentConfig
 * @text SETUP
 *
 * @param menu-switch
 * @parent parentConfig
 * @type switch
 * @text Menu Switch ID
 * @desc When this switch is ON, then this command is visible in the menu.
 * @default 105
 *
 * @param menu-name
 * @parent parentConfig
 * @type string
 * @text Menu Name
 * @desc The name of the command used for JAFTING's Creation.
 * @default Creation
 *
 * @param menu-icon
 * @parent parentConfig
 * @type number
 * @text Menu Icon
 * @desc The icon of the command used for JAFTING's Creation.
 * @default 2565
 *
 *
 * @command call-menu
 * @text Call the Creation Menu
 * @desc Calls the JAFTING Creation scene.
 *
 * @command unlock-categories
 * @text Unlock Categories
 * @desc Unlocks all crafting categories matching the provided keys.
 * @arg categoryKeys
 * @type string[]
 * @text Category Keys
 * @desc All the keys of the categories to be unlocked.
 * @default []
 *
 * @command lock-categories
 * @text Lock Categories
 * @desc Locks all crafting categories matching the provided keys.
 * @arg categoryKeys
 * @type string[]
 * @text Category Keys
 * @desc All of the keys of the categories to be locked.
 * @default []
 *
 * @command unlock-recipes
 * @text Unlock Recipes
 * @desc Unlocks all crafting recipes matching the provided keys.
 * @arg recipeKeys
 * @type string[]
 * @text Recipe Keys
 * @desc All the keys of the recipes to be unlocked.
 * @default []
 *
 * @command lock-recipes
 * @text Lock Recipes
 * @desc Locks all crafting recipes matching the provided keys.
 * @arg recipeKeys
 * @type string[]
 * @text Recipe Keys
 * @desc All of the keys of the recipes to be locked.
 * @default []
 *
 * @command unlock-all-categories
 * @text Unlock All Categories
 * @desc Unlocks all implemented crafting categories.
 *
 * @command lock-all-categories
 * @text Lock All Categories
 * @desc Locks all implemented crafting categories.
 *
 * @command unlock-all-recipes
 * @text Unlock All Recipes
 * @desc Unlocks all implemented crafting recipes.
 *
 * @command lock-all-recipes
 * @text Lock All Recipes
 * @desc Locks all implemented crafting recipes.
 */
//endregion annotations